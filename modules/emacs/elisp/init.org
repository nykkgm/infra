#+TITLE: Configurations for GNU Emacs
#+AUTHOR: Naoyuki Ikegami
#+EMAIL: nykkgm@pm.me
#+STARTUP: content
#+STARTUP: fold

* Header
#+begin_src emacs-lisp :tangle "init.el"
  ;; init.el -*- lexical-binding: t -*-
#+end_src
* Booting
** Setup user information
#+begin_src emacs-lisp :tangle "init.el"
  (setq user-full-name "nykkgm")
  (setq user-mail-address "nykkgm@pm.me")
#+end_src
** Temporally disable magic file name
#+begin_src emacs-lisp :tangle yes
  (defconst my/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
 #+end_src
** Setup package manager
*** Install Elpaca 
#+begin_src emacs-lisp :tangle yes
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src
*** Install SetupEl
#+begin_src emacs-lisp :tangle yes
  (elpaca setup
    (require 'setup))
  (elpaca-wait)

  ;; wrapping function to work with Elpaca
  (defun setup-wrap-to-install-package (body _name)
    "Wrap BODY in an `elpaca' block if necessary.
  The body is wrapped in an `elpaca' block if `setup-attributes'
  contains an alist with the key `elpaca'."
    (if (assq 'elpaca setup-attributes)
        `(elpaca ,(cdr (assq 'elpaca setup-attributes)) ,@(macroexp-unprogn body))
      body))

  ;; Add the wrapper function
  (add-to-list 'setup-modifier-list #'setup-wrap-to-install-package)
  (setup-define :elpaca
    (lambda (order &rest recipe)
      (push (cond
  	   ((eq order t) `(elpaca . ,(setup-get 'feature)))
  	   ((eq order nil) '(elpaca . nil))
  	   (`(elpaca . (,order ,@recipe))))
  	  setup-attributes)
      ;; If the macro wouldn't return nil, it would try to insert the result of
      ;; `push' which is the new value of the modified list. As this value usually
      ;; cannot be evaluated, it is better to return nil which the byte compiler
      ;; would optimize away anyway.
      nil)
    :documentation "Install ORDER with `elpaca'.
  The ORDER can be used to deduce the feature context."
    :shorthand #'cadr)

  ;; define :opt to handle custom variables safe
  (setup-define :opt
    (lambda (&rest pairs)
      `(setopt ,@pairs))
    :after-loaded t)

  ;; define :load-after to handle dependency
  (setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src

** Do not show some confusing warnings when installing packages
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'display-buffer-alist
	       '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
		 (display-buffer-no-window)
		 (allow-no-window . t)))
#+end_src
** Native compilation settings
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'comp-run
    ;; config
    (setopt native-comp-async-jobs-number 16)
    (setopt native-comp-speed 3)
    (setopt native-comp-always-compile t))

  (with-eval-after-load 'warnings
    ;; config
    (setopt warning-suppress-types '((comp))))
#+end_src
* Basics
** Show line numbers in programming mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (with-eval-after-load 'display-line-numbers
    (setopt display-line-numbers-grow-only t))
#+end_src
** C-k deletes whole line
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'simple
    (setopt kill-whole-line t))
#+end_src
** Highlight pair parenthesis in programming mode
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'prog-mode
    (add-hook 'prog-mode-hook #'show-paren-local-mode))

  (with-eval-after-load 'paren
    (setopt show-paren-style 'mixed))
#+end_src
** Add parenthesis pair automatically
Now using puni.el, instead of electric-pair-mode
#+begin_src emacs-lisp :tangle yes
;(add-hook 'emacs-startup-hook #'electric-pair-mode)
#+end_src
** Revert a file when it was changed externally
#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook #'global-auto-revert-mode)
#+end_src
** Delete the selected region upon text insersion
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'delsel
  (delete-selection-mode t))
#+end_src
** Make C-g a bit more helpful
#+begin_src emacs-lisp :tangle yes
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))

  (define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+end_src
** Enable savehist
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'savehist
  (savehist-mode t))
#+end_src
** Distiguish same name buffers
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'uniquify
    (setopt uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src
** Time format
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'time
    (setopt display-time-24hr-format t))
#+end_src
** Warn only errors
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'warnings
    (setopt warning-minimum-level :error))
#+end_src
** Show entered keys while typing a command
#+begin_src emacs-lisp :tangle yes
  (setopt echo-keystrokes 0.1)
#+end_src
** Recover the cursor position
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'saveplace
  (save-place-mode t))
#+end_src
** Enable file local variables
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'files
  (setopt enable-local-variables :all))
#+end_src
** Ignore case in completion
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'minibuffer
    (setopt read-file-name-completion-ignore-case t))

  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
#+end_src
** Set time locale to "C" to align correct
#+begin_src emacs-lisp :tangle yes
  (setq system-time-locale "C")
#+end_src
** Enlarge kill-ring
#+begin_src emacs-lisp :tangle yes
(setopt kill-ring-max 100000)
(setopt savehist-additional-variables '(kill-ring))
#+end_src
** Truncate long lines
#+begin_src emacs-lisp :tangle yes
  (setopt truncate-lines t)
  (setopt truncate-partial-width-windows t)
#+end_src
* Key Bindings
** Show candidates of key bindings
#+begin_src emacs-lisp :tangle yes
(setup which-key
  (:elpaca t)
  (:with-hook elpaca-after-init-hook
    (:hook which-key-mode)))
#+end_src
* UI
** Transient
#+begin_src emacs-lisp :tangle yes
(setup transient
  (:elpaca t))
#+end_src
* Editing
** Meow
#+begin_src emacs-lisp :tangle yes
(setup meow
  (:elpaca t)
  (:require meow)
  
  (:opt meow-use-clipboard t
	meow-selection-command-fallback
	'((meow-change . meow-change-char)
	  (meow-kill . meow-kill-whole-line)
	  (meow-cancel-selection . keyboard-quit)
	  (meow-pop-selection . meow-pop-grab)
	  (meow-beacon-change . meow-beacon-change-char)))

  ;;(:with-hook meow-insert-exit-hook
  ;;  (:hook deactivate-input-method))
 
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    
    ;; MOTION state: in mini-buffer when using treemacs, magit
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev))

    ;; INSERT state
    (meow-define-keys 'insert
      '("C-a" . meow-back-to-indentation)
      '("C-u" . scroll-down)
      '("C-d" . scroll-up)
      '("s-a" . mark-whole-buffer)
      '("s-c" . meow-save)
      '("s-f" . consult-line)
      '("s-s" . save-buffer)
      '("s-x" . meow-kill)
      '("s-v" . meow-yank)
      '("s-z" . vundo)
      '("<backspace>" . puni-backward-delete-char))
    
    ;; NORMAL state
    (meow-normal-define-key

     ;; Ctrl key
     ;; meow- 移動系関数は C- を使ったマクロとして実装されているので
     ;; C- を変更すると影響が出るので問題ないことを確認する。
     '("C-a" . meow-back-to-indentation)
     '("C-u" . scroll-down) ; Emacs down は Vim up。
     '("C-d" . scroll-up)

     ;; SUPER key
     ;; terminal では使えないので GUI Emacs 専用だと思った方が良い。
     '("s-a" . mark-whole-buffer)
     '("s-c" . meow-save)
     '("s-f" . consult-line)
     '("s-s" . save-buffer)
     ;; '("s-q" . save-buffers-kill-emacs)
     '("s-x" . meow-kill)
     '("s-v" . meow-yank)
     '("s-z" . vundo)

     ;; GUI ならクローズボタンがあるので、クライアント終了コマンドは terminal のために用意している。
     '(": q" . save-buffers-kill-emacs) ;; Emacs プロセスを終了する。
     '(": shift+q" . save-buffers-kill-terminal) ;; emacsclient の接続を終了する。
     '(": w" . save-buffer)

     ;; argument
     '(", u" . meow-universal-argument) ; 引数を与える。 , u 10 => M-x meow-next で10行移動のように使う。

     ;; basic
     '(", c" . comment-line)
     '(", e e" . "C-x C-e") ;; eval-last-sexp
     '(", e m" . pp-macroexpand-last-sexp)
     '(", f" . consult-fd)
     '(", g" . consult-ripgrep)
     '(", x" . execute-extended-command)

     ;; debug
     '(", d f" . consult-flycheck)

     ;; puni
     '(", a (" . puni-wrap-round)
     '(", a [" . puni-wrap-square)
     '(", a {" . puni-wrap-curly)
     '(", a <" . puni-wrap-angle)
     '(", a d" . puni-splice)
     '(", s l" . puni-slurp-forward)
     '(", b a" . puni-barf-forward)

     ;; buffer
     '(", b d" . kill-this-buffer)
     
     ;; window
     '(", w d" . delete-window)
     '(", w s" . split-window-vertically)
     '(", w v" . split-window-horizontally)

     ;; base layout
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("b" . consult-buffer)
     '("B" . meow-back-symbol)
     '("d" . meow-kill)
     '("D" . meow-kill-whole-line)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . find-file) ;;

     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-beginning-of-thing)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-page-down)
     '("k" . meow-prev)
     '("K" . meow-page-up)
     '("l" . meow-right)
     '("L" . meow-end-of-thing)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-open-below)
     '("O" . meow-open-above)
     '("p" . meow-yank) ;; paste

     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-change) ;; sustitute
     '("t" . meow-till)
     '("u" . vundo) ;; undo
     '("U" . meow-undo-in-selection)

     '("v i" . meow-inner-of-thing) ;; Inner
     '("v a" . meow-bounds-of-thing) ;; Arround
     '("v b" . meow-block) ;; Block
     '("v c" . puni-mark-list-around-point) ;; Contents
     '("v x" . puni-mark-sexp-around-point) ;; eXpression
     '("v l" . meow-line) ;; Line
     '("v s" . meow-mark-symbol) ;; Symbol
     '("v w" . meow-mark-word) ;; Word
     '("v v" . puni-expand-region) ;; Expand
     '("v r" . rectangle-mark-mode) ;; Rectangle

     '("x" . puni-forward-delete-char)
     '("y" . meow-save) ;;
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("/" . meow-visit)

     '("<backspace>" . puni-backward-delete-char)
     '("<escape>" . meow-cancel-selection)))
  
  (meow-setup)
  (meow-global-mode 1))
#+end_src
** puni
#+begin_src emacs-lisp :tangle yes
(setup puni
  (:elpaca t)
  (:when-loaded
    (puni-global-mode)))
#+end_src
* IME
** ddskk
#+begin_src emacs-lisp :tangle yes
;(use-package ddskk
;  :ensure t
;  :bind ("C-x C-j" . skk-mode)
;  :config
;  (setq default-input-method "japanese-skk"))
#+end_src

* Appearances
** Theme
#+begin_src emacs-lisp :tangle yes
(setup modus-themes
  (:elpaca t)
  (:require modus-themes)

  (:when-loaded
    (keymap-global-set "<f5>" #'modus-themes-toggle)
    (keymap-global-set "C-<f5>" #'modus-themes-select)
    (keymap-global-set "M-<f5>" #'modus-themes-rotate)
    (modus-themes-load-theme (cadr modus-themes-to-toggle)))
  
  (:opt modus-themes-custom-auto-reload nil
	modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
	modus-themes-to-rotate modus-themes-items
	modus-themes-mixed-fonts t
	modus-themes-variable-pitch-ui t
	modus-themes-italic-constructs t
	modus-themes-bold-constructs nil
	modus-themes-completions '((t . (extrabold)))
	modus-themes-prompts '(extrabold)
	modus-themes-headings '((agenda-structure . (variable-pitch light 2.2))
				(agenda-date . (variable-pitch regular 1.3))
				(t . (regular 1.15)))
	modus-themes-common-palette-overrides nil))
#+end_src
** Fonts
*** Use icon fonts
#+begin_src emacs-lisp :tangle yes
(setup nerd-icons
  (:elpaca t))

(setup nerd-icons-completion
  (:elpaca t)
  (:with-hook marginalia-mode-hook
    (:hook nerd-icons-completion-marginalia-setup)))

(setup nerd-icons-corfu
  (:elpaca t)
  (:load-after corfu)
  (:when-loaded
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)))

(setup nerd-icons-dired
  (:elpaca t)
  (:with-hook dired-mode-hook
    (:hook nerd-icons-dired-mode)))
#+end_src
*** Use Fontaine
#+begin_src emacs-lisp :tangle yes
;; Fontaine (font configurations)
;; Read the manual: <https://protesilaos.com/emacs/fontaine>
(setup fontaine
  (:elpaca t)
  (:require fontaine)

  (:when-loaded
    (keymap-global-set "C-c f" #'fontaine-set-preset)
    (keymap-global-set "C-c F" #'fontaine-toggle-preset)

    ;; This is defined in Emacs C code: it belongs to font settings.
    (setq x-underline-at-descent-line nil)
    
    ;; And this is for Emacs28.
    (setq-default text-scale-remap-header-line t)
    
    ;; This is the default value.  Just including it here for
    ;; completeness.
    (setq fontaine-latest-state-file
	  (locate-user-emacs-file "fontaine-latest-state.eld"))
    
    (setq fontaine-presets
	  '((small
	     :default-height 100)
	    (regular)
	    (medium
	     :default-height 140
	     :bold-weight extrabold)
	    (large
	     :inherit medium
	     :default-weight semilight
	     :default-height 180)
	    (t
	     :default-family "PlemolJP Console NF"
	     :default-height 140
	     :fixed-pitch-family "PlemolJP Console NF"
	     :fixed-pitch-serif-family "Sarasa Fixed Slab J"
	     :variable-pitch-family "PlemolJP Console NF")))

    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-mode)
    
    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line))))
#+end_src
** Focusing
*** Highlight current line for a while after switching
#+begin_src emacs-lisp :tangle yes
;;;; Pulsar
;; Read the pulsar manual: <https://protesilaos.com/emacs/pulsar>.
(setup pulsar
  (:elpaca t)
  (:require pulsar)
  
  (:with-hook next-error-hook
    (:hook pulsar-pulse-line-red)
    (:hook pulsar-recenter-top)
    (:hook pulsar-reveal-entry))
  (:opt pulsar-pulse t
	pulsar-delay 0.055
	pulsar-iterations 10
	pulsar-face 'pulsar-green
	pulsar-highlight-face 'pulsar-magenta)
  (:when-loaded
    (pulsar-global-mode 1)))
#+end_src
** Mode line
*** moody
#+begin_src emacs-lisp :tangle yes
(setup moody
  (:elpaca t)
  (:opt x-underline-at-descent-line t)
  (:when-loaded
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-eldoc-minibuffer-message-function)))
#+end_src
*** minions
#+begin_src emacs-lisp :tangle yes
  (setup minions
    (:elpaca t)
    (:with-hook elpaca-after-init-hook
      (:hook minions-mode))
    (:opt minions-mode-line-lighter "[+]"))
#+end_src
*** mlscroll
#+begin_src emacs-lisp :tangle yes
(setup mlscroll
  (:elpaca t)
  (:when-loaded
    (if (daemonp)
	(add-hook 'server-after-make-frame-hook #'mlscroll-mode)
      (mlscroll-mode 1))))
#+end_src
** Window
*** posframe
#+begin_src emacs-lisp :tangle yes
(setup posframe
  (:elpaca t))
#+end_src
* Search
** marginalia
#+begin_src emacs-lisp :tangle yes
(setup marginalia
  (:elpaca t)
  (:with-hook elpaca-after-init-hook
    (:hook marginalia-mode))
  (:with-map minibuffer-local-map
    (:bind "M-A" marginalia-cycle))
  (:opt marginalia-align-offset 25))
#+end_src
** vertico
#+begin_src emacs-lisp :tangle yes  
(setup vertico
  (:elpaca t)
  (:with-hook elpaca-after-init-hook
    (:hook vertico-mode))
  (:opt vertico-resize nil
	vertico-count 20
	vertico-cycle t)
  (:when-loaded
    (with-eval-after-load 'nerd-icons
      (defvar +vertico-current-arrow t)
      (cl-defmethod vertico--format-candidate :around
	(cand prefix suffix index start &context ((and +vertico-current-arrow
                                                       (not (bound-and-true-p vertico-flat-mode)))
						  (eql t)))
	(setq cand (cl-call-next-method cand prefix suffix index start))
	(let ((arrow (nerd-icons-faicon "nf-fa-hand_o_right")))
	  (if (bound-and-true-p vertico-grid-mode)
              (if (= vertico--index index)
		  (concat arrow " " cand)
		(concat #("_" 0 1 (display " ")) cand))
            (if (= vertico--index index)
		(concat " " arrow " " cand)
              (concat "    " cand))))))))
#+end_src
** orderless
#+begin_src emacs-lisp :tangle yes
(setup orderless
  (:elpaca t)
  (:opt completion-styles '(orderless initials flex basic)
	completion-category-overrides
	'((file (styles flex basic partial-completion))))
  (:when-loaded
   (add-to-list 'completion-styles-alist
		'(orderless orderless-try-completion orderless-all-completions
			    "Completion of multiple components, in any order."))))
#+end_src

* Completion
** corfu
#+begin_src emacs-lisp :tangle yes
(setup corfu
  (:elpaca t)
  (:with-hook elpaca-after-init-hook
    (:hook global-corfu-mode))
  (:with-map corfu-map
    (:bind "TAB" corfu-next
	   "S-TAB" corfu-previous
	   "SCP" corfu-insert-separator))
  (:opt 
   tab-always-indent 'complete
   corfu-preview-current nil
   corfu-min-width 20
   corfu-auto t
   corfu-auto-delay 0.2
   corfu-auto-prefix 1
   corfu-cycle t
   corfu-popupinfo-mode t
   corfu-popupinfo-delay 0.2)
  (:when-loaded
    (defvar corfu--index)
    (defvar corfu-magic-insert-or-next-line
      `(menu-item "" nil :filter ,(lambda (&optional _)
				    (when (>= corfu--index 0)
				      'corfu-insert)))
      "If we made a selection during `corfu' completion, select it.")
    (defvar corfu-magic-cancel-or-backspace
      `(menu-item "" nil :filter ,(lambda (&optional _)
				    (when (>= corfu--index 0)
				      'corfu-reset)))
      "If we made a selection during `corfu' completion, cancel it.")
    (define-key corfu-map [return] corfu-magic-insert-or-next-line)
    (define-key corfu-map [delete] corfu-magic-cancel-or-backspace)
    (define-key corfu-map [backspace] corfu-magic-cancel-or-backspace)
    
    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history))))
#+end_src
** consult
#+begin_src emacs-lisp :tangle yes
  (setup consult
    (:elpaca t)
    (:with-hook completion-list-mode-hook
      (:hook consult-preview-at-point-mode))
    (:opt xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref
	  consult-line-start-from-top t)

    ;; custumized consult-line
    (defun c/consult-line (&optional at-point)
  	"Consult-line uses things-at-point if set C-u prefix."
  	(interactive "P")
  	(if at-point
  	    (consult-line (thing-at-point 'symbol))
  	  (consult-line)))

    (:bind
     ;; C-c bindings (mode-specific-map)
     [remap switch-to-buffer] consult-buffer                 ; C-x b
     [remap project-switch-to-buffer] consult-project-buffer ; C-x p b
     
     ;; M-g bindings (goto-map)
     [remap goto-line] consult-goto-line    ; M-g g
     [remap imenu] consult-imenu            ; M-g i
     "M-g f" consult-flymake

     ;; C-M-s bindings
     "C-s"  c/consult-line       ; isearch-forward
     "C-M-s"  nil                ; isearch-forward-regexp
     "C-M-s s"  isearch-forward
     "C-M-s C-s"  isearch-forward-regexp
     "C-M-s r" consult-ripgrep)
    (:with-map minibuffer-local-map
      (:bind "C-r" consult-history)))
#+end_src

* Dired funtionallity
** dired
#+begin_src emacs-lisp :tangle yes
  (setup dired
    ;(:elpaca t)
    (:with-hook dired-mode-hook
      (:hook dired-hide-details-mode)
      (:hook hl-line-mode))
    (:opt dired-recursive-copies 'always
  	dired-recursive-deletes 'always
  	delete-by-moving-to-trash t
  	dired-dwim-target t))
#+end_src
** dired-subtree
#+begin_src emacs-lisp :tangle yes
  (setup dired-subtree
    (:elpaca t)
    (:load-after dired)
    (:with-map dired-mode-map
      (:bind
       "<tab>" dired-subtree-toggle
       "TAB" dired-subtree-toggle
       "<backtab>" dired-subtree-remove
       "S-TAB" dired-subtree-remove))
    (:opt dired-subtree-use-backgrounds nil))
#+end_src
** peep-dired
#+begin_src emacs-lisp :tangle yes
(setup peep-dired
  (:elpaca t)
  (:with-map dired-mode-map
    (:bind "P" peep-dired))
  (:when-loaded
    (setq peep-dired-cleanup-on-disable t)))
#+end_src

* Snippet
** yasnippet
#+begin_src emacs-lisp :tangle yes
(setup yasnippet
  (:elpaca t)
  (:with-hook elpaca-after-init-hook
    (:hook yas-global-mode)))
#+end_src

* Git
** magit
#+begin_src emacs-lisp :tangle yes
(setup magit
  (:elpaca t))
#+end_src

* Coding
** treesitter
#+begin_src emacs-lisp :tangle yes
(setup treesit
  ;(:elpaca t)
  (:opt treesit-font-lock-level 4))
#+end_src
** Languages
*** Clojure
**** cider
#+begin_src emacs-lisp :tangle yes
(setup cider
  (:elpaca t))
#+end_src
*** Nix
**** nix-mode
#+begin_src emacs-lisp :tangle yes
(setup nix-mode
  (:elpaca t)
  (:match-file "\\.nix\\'"))
#+end_src

* Org mode
My files:
- tasks.org
  something needs action
- notes.org
  something learned, maybe to be reviewed sometimes, maybe not categorized yet
- projects.org
  something continuous, maybe containing multiple subtasks
** Basic setup
*** org
#+begin_src emacs-lisp :tangle yes
(setup org
  (:elpaca t)

  (setq org-directory (expand-file-name "~/org"))
  (add-to-list 'safe-local-variable-values '(org-hide-leading-stars . t))
  (add-to-list 'safe-local-variable-values '(org-hide-macro-markers . t))

  ;; my files/folders
  (defvar my/org-tasks (concat org-directory "/tasks.org"))
  (defvar my/org-notes (concat org-directory "/notes.org"))
  (defvar my/org-projects (concat org-directory "/projects.org"))
  (defvar my/org-agenda-files `(,my/org-tasks
				,my/org-projects))

  (:bind "C-c l" org-store-link
	 "C-c a"  org-agenda)
  (:with-map org-mode-map
    (:bind "C-c ," org-insert-structure-template
	   "C-c C-," org-insert-structure-template))

  (:when-loaded
    ;; todo
    (setq org-todo-keywords '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCEL(c)")))
    
    ;; startup
    (setq org-startup-folded 'show3levels)
    (setq org-startup-truncated nil)

    ;; agenda
    (setq org-agenda-files my/org-agenda-files)
    
    ;; refile
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'file)
    (defun my/reset-org-refile-targets ()
      (setq org-refile-targets `((my/org-tasks :level . 1)
				 (my/org-projects :level . 2)
				 (my/org-notes :level . 1))))
    (my/reset-org-refile-targets)
    
    ;; log
    (setq org-log-into-drawer t)
    (setq org-log-done 'time)
    
    (defun my/update-org-agenda-files ()
      (interactive)
      (setq org-agenda-files my/org-agenda-files))))
#+end_src
*** org-src
#+begin_src emacs-lisp :tangle yes
  (setup org-src
    ;;(:elpaca t)
    (:opt
     org-edit-src-content-indentation 0
     org-src-window-setup 'current-window
     org-src-fontify-natively nil
     org-src-tab-acts-natively nil))
#+end_src
*** org-capture
#+begin_src emacs-lisp :tangle yes
(setup org-capture
;; (:elpaca t)
  (:bind "C-c c" org-capture)
  (:when-loaded
    (setq org-capture-use-agenda-date t)
    (setq org-capture-bookmark nil)
    (setq org-capture-templates `(("t" "Task" entry (file my/org-tasks)
				 "* TODO %?\n %i")
				("n" "Note" entry (file my/org-notes)
				 "* %?\nEntered on %U\n %i")))))
#+end_src
*** org-popup-posframe
#+begin_src emacs-lisp :tangle yes
;; (use-package org-popup-posframe
;;   :ensure t
;;   :after posframe
;;   :vc (:url "https://github.com/A7R7/org-popup-posframe.git" :rev :newest)
;;   :custom
;;   (org-popup-posframe-mode 1))
#+end_src
** Theme
*** org-superstar
#+begin_src emacs-lisp :tangle yes
(setup org-superstar
  (:elpaca t)
  (:with-mode org-mode
    (:hook org-superstar-mode))
  (:opt oprg-superstar-leading-bullet " "))
#+end_src
** org-roam
#+begin_src emacs-lisp :tangle yes
(setup org-roam
  (:elpaca t)
  (:bind "C-c n f" org-roam-node-find     ; find and access, create if not exist
	 "C-c n i" org-roam-node-insert   ; find and insert link, create it not exist
	 "C-c n t" org-roam-buffer-toggle
	 "C-c n a" org-roam-alias-add)
  (:when-loaded
    (setq org-roam-directory (concat org-directory "/roam"))
    (org-roam-db-autosync-mode)))
#+end_src

* Reading Documents
** Read ePub
#+begin_src emacs-lisp :tangle yes
(setup nov
  ;; "Major mode for reading EPUBs in Emacs"
  (:elpaca t)
  (:match-file "\\.epub\\'"))

;; (use-package nov-xwidget
;;   :demand t
;;   :after nov
;;   :vc ( :url https://github.com/chenyanming/nov-xwidget
;; 	:branch :"main")
;;   :hook (nov-mode . nov-xwidget-inject-all-files)
;;   :bind ( :map nov-mode-map
;; 	  ("o" . nov-widget-view)))
#+end_src
** Read PDF
#+begin_src emacs-lisp :tangle yes
(setup pdf-tools
  (:elpaca t)
  (:when-loaded
    (pdf-tools-install)
    (setq pdf-annot-activate-created-annotations t)
    (:with-map pdf-view-mode-map
      (:bind "C-s" isearch-forward))
    (setq pdf-view-resize-factor 1.1)))
#+end_src

* Footer
** Enable magic file name again
#+begin_src emacs-lisp :tangle yes
  (setq file-name-handler-alist my/saved-file-name-handler-alist)
#+end_src
