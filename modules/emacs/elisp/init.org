#+TITLE: Configurations for GNU Emacs
#+AUTHOR: Naoyuki Ikegami
#+EMAIL: nykkgm@pm.me
#+STARTUP: content
#+STARTUP: fold

* Header
#+begin_src emacs-lisp :tangle yes
  ;; init.el -*- lexical-binding: t -*-
#+end_src
* Booting
** Setup user information
#+begin_src emacs-lisp :tangle yes
  (setq user-full-name "nykkgm")
  (setq user-mail-address "nykkgm@pm.me")
#+end_src
** Temporally disable magic file name
#+begin_src emacs-lisp :tangle yes
  (defconst my/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
 #+end_src
** Do not show some confusing warnings when installing packages
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'display-buffer-alist
	       '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
		 (display-buffer-no-window)
		 (allow-no-window . t)))
#+end_src
** Native compilation settings
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'comp-run
    ;; config
    (setopt native-comp-async-jobs-number 16)
    (setopt native-comp-speed 3)
    (setopt native-comp-always-compile t))

  (with-eval-after-load 'warnings
    ;; config
    (setopt warning-suppress-types '((comp))))
#+end_src
** Package repositories
#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src
* Basics
** Show line numbers in programming mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(with-eval-after-load 'display-line-numbers
(setopt display-line-numbers-grow-only t))
#+end_src
** C-k deletes whole line
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'simple
(setopt kill-whole-line t))
#+end_src
** Highlight pair parenthesis in programming mode
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'prog-mode
(add-hook 'prog-mode-hook #'show-paren-local-mode))

(with-eval-after-load 'paren
(setopt show-paren-style 'mixed))
#+end_src
** Add parenthesis pair automatically
#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook #'electric-pair-mode)
#+end_src
** Revert a file when it was changed externally
#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook #'global-auto-revert-mode)
#+end_src
** Delete the selected region upon text insersion
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'delsel
  (delete-selection-mode t))
#+end_src
** Make C-g a bit more helpful
#+begin_src emacs-lisp :tangle yes
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))

  (define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+end_src
** Enable savehist
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'savehist
  (savehist-mode t))
#+end_src
** Distiguish same name buffers
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'uniquify
    (setopt uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src
** Time format
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'time
    (setopt display-time-24hr-format t))
#+end_src
** Warn only errors
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'warnings
    (setopt warning-minimum-level :error))
#+end_src
** Show entered keys while typing a command
#+begin_src emacs-lisp :tangle yes
  (setopt echo-keystrokes 0.1)
#+end_src
** Recover the cursor position
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'saveplace
  (save-place-mode t))
#+end_src
** Enable file local variables
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'files
  (setopt enable-local-variables :all))
#+end_src
** Ignore case in completion
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'minibuffer
    (setopt read-file-name-completion-ignore-case t))

  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
#+end_src
** Set time locale to "C" to align correct
#+begin_src emacs-lisp :tangle yes
  (setq system-time-locale "C")
#+end_src
** Enlarge kill-ring
#+begin_src emacs-lisp :tangle yes
(setopt kill-ring-max 100000)
(setopt savehist-additional-variables '(kill-ring))
#+end_src
** Truncate long lines
#+begin_src emacs-lisp :tangle yes
  (setopt truncate-lines t)
  (setopt truncate-partial-width-windows t)
#+end_src
* Key Bindings
** Show candidates of key bindings
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1))
#+end_src
* UI
** Transient
#+begin_src emacs-lisp :tangle yes
(use-package transient
  :ensure t)
#+end_src
* Editing
** Meow
#+begin_src emacs-lisp :tangle yes
(use-package meow
  :ensure t
  :demand t
  :after puni
  
  :custom
  (meow-use-clipboard t)
  (meow-selection-command-fallback
   '((meow-change . meow-change-char)
     (meow-kill . meow-kill-whole-line)
     (meow-cancel-selection . keyboard-quit)
     (meow-pop-selection . meow-pop-grab)
     (meow-beacon-change . meow-beacon-change-char)))
  
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    
    ;; MOTION state
    ;; the default state for special modes like dired, proced and so on.
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("/" . consult-line))

    ;; KEYPAD state
    ;; keybindings after the leader key (= SPC)
    (meow-leader-define-key
     ;; run original command in motion state
     '("j" . "h-j")
     '("k" . "h-k")
     '("/" . "h-/")
     ;; for digit arguments
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     ;; help
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))

    ;; NORMAL state
    ;; the default state for text editing
    (meow-normal-define-key
     ;; common movements
     ;;  go to a position hint after each movement
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     ;;  movements can be done with negative argument
     '("-" . negative-argument)
     
     ;; manipulate selection area
     '(";" . meow-reverse)		    ; reverse
     '("<escape>" . meow-cancel-selection)  ; cancel
     ;;  thing-based
     '("v i" . meow-inner-of-thing)	    ; inner part of thing
     '("v a" . meow-bounds-of-thing)	    ; whole thing
     ;;  
     '("v b" . meow-block)		    ; matched parens area
     '("v c" . puni-mark-list-around-point) ; contents
     '("v x" . puni-mark-sexp-around-point) ; expression
     '("v l" . meow-line)		    ; line
     '("v s" . meow-mark-symbol)	    ; symbol
     '("v w" . meow-mark-word)		    ; word
     '("v v" . puni-expand-region)	    ; expand current region
     '("v r" . rectangle-mark-mode)	    ; rectangle
     
     '("a" . meow-append)		; switch to INSERT state at the end
     '("b" . consult-buffer)
     '("B" . meow-back-symbol)		; backward to the symbol beginning
     '("d" . meow-kill)			; kill current region
     '("D" . meow-kill-whole-line)	; kill whole line include LF
     '("e" . meow-next-word)		; forward to the word end
     '("E" . meow-next-symbol)		; forward to the symbol end
     '("f" . find-file) 

     '("G" . meow-grab)			; push current selection
     '("h" . meow-left)			; move cursor left 
     '("H" . meow-beginning-of-thing)	; select to the begging of thing
     '("i" . meow-insert)		; switch to INSERT state at the beggining
     '("I" . meow-open-above)		; insert a new line above
     '("j" . meow-next)			; move cursor down
     '("J" . meow-page-down)		; move cursor one page down
     '("k" . meow-prev)			; move cursor up
     '("K" . meow-page-up)		; move cursor one page up
     '("l" . meow-right)		; move cursor right
     '("L" . meow-end-of-thing)		; select to the end of thing
     '("m" . meow-join)			; select between prev line end to this line beginning
     '("n" . meow-search)		; search with the regexp-search-ring
     '("o" . meow-open-below)		; insert a new line below
     '("O" . meow-open-above)		; insert a new line above
     '("p" . meow-yank)			; paste

     '("Q" . meow-goto-line)		; goto line
     '("r" . meow-replace)		; replace current region with current kill
     '("R" . meow-swap-grab)		; swap pushed contents with current region
     '("s" . meow-change)		; delete region, switch INSERT and select inserted after exit
     '("t" . meow-till)			; select until next to a specified char 
     '("u" . meow-undo)			; undo
     '("U" . meow-undo-in-selection)	; undo in current selection

     '("x" . puni-forward-delete-char)
     '("y" . meow-save) 		; copy
     '("Y" . meow-sync-grab)		; sync the 2nd selection to current region
     '("z" . meow-pop-selection)	; pop one selection
     '("'" . repeat)
     '("/" . meow-visit)		; search and select

     '("<backspace>" . puni-backward-delete-char)
     '("<escape>" . meow-cancel-selection)

     ;; other commands
     '(", c" . comment-line)
     '(", e e" . "C-x C-e") ;; eval-last-sepx
     '(", e m" . pp-macroexpand-last-sexp)
     '(", x" . execute-extended-command)

     ;; puni
     '(", a (" . puni-wrap-round)
     '(", a [" . puni-wrap-square)
     '(", a {" . puni-wrap-curly)
     '(", a <" . puni-wrap-angled)
     '(", a d" . puni-splice)
     '(", s l" . puni-slurp-forward)
     '(", b a" . puni-barf-forward)

     ;; buffer
     '(", b d" . kill-this-buffer)
     
     ;; window
     '(", w d" . delete-window)
     '(", w s" . split-window-vertically)
     '(", w v" . split-window-horizontally))

    ;; INSERT state
    (meow-define-keys 'insert
      '("C-a" . meow-back-to-indentation)
      '("C-u" . scroll-down)
      '("C-d" . scroll-up)
      '("s-a" . mark-whole-buffer)
      '("s-c" . meow-save)
      '("s-f" . consult-line)
      '("s-s" . save-buffer)
      '("s-x" . meow-kill)
      '("s-v" . meow-yank)
      '("s-z" . undo)
      '("<backspace>" . puni-backward-delete-char)))
  
  (meow-setup)
  (meow-global-mode))
#+end_src
** puni
#+begin_src emacs-lisp :tangle yes
(use-package puni
  :ensure t
  :config
  (puni-global-mode))
#+end_src
* Appearances
** Theme
#+begin_src emacs-lisp :tangle yes
(use-package modus-themes
  :ensure t
  :demand t

  :bind (("<f5>" . modus-themes-toggle)
	 ("C-<f5>" . modus-themes-select)
	 ("M-<f5>" . modus-themes-rotate))

  :config
  (modus-themes-load-theme (cadr modus-themes-to-toggle))
  
  :custom
  (modus-themes-custom-auto-reload nil)
  (modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))
  (modus-themes-to-rotate modus-themes-items)
  (modus-themes-mixed-fonts t)
  (modus-themes-variable-pitch-ui t)
  (modus-themes-italic-constructs t)
  (modus-themes-bold-constructs nil)
  (modus-themes-completions '((t . (extrabold))))
  (modus-themes-prompts '(extrabold))
  (modus-themes-headings '((agenda-structure . (variable-pitch light 2.2))
			   (agenda-date . (variable-pitch regular 1.3))
			   (t . (regular 1.15))))
  (modus-themes-common-palette-overrides nil))
#+end_src
** Fonts
*** Use icon fonts
#+begin_src emacs-lisp :tangle yes
(use-package nerd-icons
  :ensure t)

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :hook (marginalia-mode . nerd-ico-completion-marginalia-use-package)
  :config
  (nerd-icons-completion-mode))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :hook dired-mode)
#+end_src
*** Use Fontaine
#+begin_src emacs-lisp :tangle yes
(use-package fontaine
  :ensure t
  :demand t

  :bind (("C-c f" . fontaine-set-preset)
	 ("C-c F" . fontaine-toggle-preset))
  :config
  ;; This is defined in Emacs C code: it belongs to font settings.
  (setq x-underline-at-descent-line nil)
  
  ;; And this is for Emacs28.
  (setq-default text-scale-remap-header-line t)
  
  ;; This is the default value.  Just including it here for
  ;; completeness.
  (setq fontaine-latest-state-file
	(locate-user-emacs-file "fontaine-latest-state.eld"))
  
  (setq fontaine-presets
	'((small
	   :default-height 100)
	  (regular)
	  (medium
	   :default-height 140
	   :bold-weight extrabold)
	  (large
	   :inherit medium
	   :default-weight semilight
	   :default-height 180)
	  (t
	   :default-family "PlemolJP Console NF"
	   :default-height 140
	   :fixed-pitch-family "PlemolJP Console NF"
	   :fixed-pitch-serif-family "Sarasa Fixed Slab J"
	   :variable-pitch-family "PlemolJP Console NF")))

  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  (fontaine-mode)
  
  (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))
#+end_src
** Focusing
*** Highlight current line for a while after switching
#+begin_src emacs-lisp :tangle yes
(use-package pulsar
  :ensure t
  :after simple
  :custom
  (pulsar-pulse t)
  (pulsar-delay 0.055)
  (pulsar-iterations 10)
  (pulsar-face 'pulsar-green)
  (pulsar-highlight-face 'pulsar-magenta)
  :config
  (add-hook 'next-error-hook #'pulsar-pulse-line-red)
  (add-hook 'next-error-hook #'pulsar-recenter-top)
  (add-hook 'next-error-hook #'pulsar-reveal-entry)
  (pulsar-global-mode 1))
#+end_src
** Mode line
*** moody
#+begin_src emacs-lisp :tangle yes
(use-package moody
  :ensure t
  :custom
  (underline-at-descent-line t)
  :config
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-eldoc-minibuffer-message-function))
#+end_src
*** minions
#+begin_src emacs-lisp :tangle yes
(use-package minions
  :ensure t
  :custom
  (minions-mode-line-lighter "[+]")
  :config
  (minions-mode 1))
#+end_src
*** mlscroll
#+begin_src emacs-lisp :tangle yes
(use-package mlscroll
  :ensure t
  :config
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'mlscroll-mode)
    (mlscroll-mode 1)))
#+end_src
** Window
*** posframe
#+begin_src emacs-lisp :tangle yes
(use-package posframe
  :ensure t)
#+end_src
* Search
** marginalia
#+begin_src emacs-lisp :tangle yes
(use-package marginalia
  :ensure t
  :bind ( :map minibuffer-local-map
	  ("M-A" . marginalia-cycle))
  :custom
  (marginalia-align-offset 25)
  :config
  (marginalia-mode 1))
#+end_src
** vertico
#+begin_src emacs-lisp :tangle yes  
(use-package vertico
  :ensure t
  :custom
  (vertico-resize nil)
  (vertico-count 20)
  (vertico-cycle t)
  :config
  (vertico-mode)
  (with-eval-after-load 'nerd-icons
    (defvar +vertico-current-arrow t)
    (cl-defmethod vertico--format-candidate :around
      (cand prefix suffix index start &context ((and +vertico-current-arrow
                                                     (not (bound-and-true-p vertico-flat-mode)))
						(eql t)))
      (setq cand (cl-call-next-method cand prefix suffix index start))
      (let ((arrow (nerd-icons-faicon "nf-fa-hand_o_right")))
	(if (bound-and-true-p vertico-grid-mode)
            (if (= vertico--index index)
		(concat arrow " " cand)
	      (concat #("_" 0 1 (display " ")) cand))
          (if (= vertico--index index)
	      (concat " " arrow " " cand)
            (concat "    " cand)))))))
#+end_src
** orderless
#+begin_src emacs-lisp :tangle yes
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless initials flex basic))
  (completion-category-overrides
   '((file (styles flex basic partial-completion))))
  :config
  (add-to-list 'completion-styles-alist
	       '(orderless
		 orderless-try-completion
		 orderless-all-completions
		 "Completion of multiple components, in any order.")))
#+end_src
* Completion
** corfu
#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :ensure t
  :bind ( :map corfu-map
	  ("TAB" . #'corfu-next)
	  ("S-TAB" . #'corfu-previous)
	  ("C-j" . #'corfu-next)
	  ("C-k" . #'corfu-previous)
	  ("SPC" . #'corfu-insert-separator))
  

  :custom
  (corfu-min-width 20)
  (corfu-auto t)
  (corfu-auto-delay 0.0)
  (corfu-auto-prefix 1)
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  (corfu-quit-no-match 'separator)
  (corfu-popupinfo-mode t)
  (corfu-popupinfo-delay 0.0)

  :config
  (defvar corfu--index)
  (defvar corfu-magic-insert-or-next-line
    `(menu-item "" nil :filter ,(lambda (&optional _)
				  (when (>= corfu--index 0)
				    'corfu-insert)))
    "If we made a selection during `corfu' completion, select it.")
  (defvar corfu-magic-cancel-or-backspace
    `(menu-item "" nil :filter ,(lambda (&optional _)
				  (when (>= corfu--index 0)
				    'corfu-reset)))
    "If we made a selection during `corfu' completion, cancel it.")
  (define-key corfu-map [return] corfu-magic-insert-or-next-line)
  (define-key corfu-map [delete] corfu-magic-cancel-or-backspace)
  (define-key corfu-map [backspace] corfu-magic-cancel-or-backspace)

  (global-corfu-mode 1)
      
  ;; Sort by input history (no need to modify `corfu-sort-function').
  (with-eval-after-load 'savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src
** consult
#+begin_src emacs-lisp :tangle yes
(use-package consult
  :ensure t
  :after (isearch minibuffer simple register xref)
  :commands consult-line-symbol-at-point
  :custom
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  (completion-in-region-function #'consult-completion-in-region)
  (consult-line-start-from-top t)
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :bind (("C-x b" . #'consult-buffer)
	 ("M-g e" . #'consult-compile-error)
	 ("M-g f" . #'consult-flycheck)
	 ("M-g g" . #'consult-goto-line)
	 ("M-g M-g" . #'consult-goto-line)
	 ("M-g o" . #'consult-outline)
	 ("M-g m" . #'consult-mark)
	 ("M-g k" . #'consult-global-mark)
	 ("M-g i" . #'consult-imenu)
	 ("M-g I" . #'consult-imenu-multi)
	 ("C-o" . #'consult-line-symbol-at-point)

	 :map isearch-mode-map
	 ("M-e" . #'consult-isearch-history)

	 :map minibuffer-local-map
	 ("M-s" . #'consult-history)
	 ("M-r" . #'consult-history))
	 

  :config
  (defun consult-line-symbol-at-point (&optional at-point)
    (interactive "P")
    (if at-point
	(consult-line (thing-at-point 'symbol))
      (consult-line)))
  
  (advice-add #'register-preview :override #'consult-register-window))
#+end_src
* Dired funtionallity
** dired
#+begin_src emacs-lisp :tangle yes
(use-package dired
  :hook ((dired-mode . dired-hide-details-mode)
	 (dired-mode . hl-line-mode))
  :custom ((dired-recursive-copies 'always)
	   (dired-recursive-deletes 'always)
	   (delete-by-moving-to-trash t)
	   (dired-dwim-target t)))
#+end_src
** dired-subtree
#+begin_src emacs-lisp :tangle yes
(use-package dired-subtree
  :ensure t
  :after dired
  :bind ( :map dired-mode-map
	  ("<tab>" . dired-subtree-toggle)
	  ("TAB" . dired-subtree-toggle)
	  ("<backtab>" . dired-subtree-remove)
	  ("S-TAB" . dired-subtree-remove))
  :custom (dired-subtree-use-backgrounds nil))
#+end_src
** peep-dired
#+begin_src emacs-lisp :tangle yes
(use-package peep-dired
  :ensure t
  :after dired
  :bind ( :map dired-mode-map
	  ("P" . peep-dired))
  :config
  (setq peep-dired-cleanup-on-disable t))
#+end_src
* Snippet
** yasnippet
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src
* Git
** magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t)
#+end_src
* Coding
** Checker
#+begin_src emacs-lisp :tangle no
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode t))
#+end_src
** Treesitter
#+begin_src emacs-lisp :tangle yes
(use-package treesit
  :custom (treesit-font-lock-level 4)
  :config
  (setq treesit-language-source-alist
	'((clojure "https://github.com/sogaiu/tree-sitter-clojure")
	  (rust "https://github.com/tree-sitter/tree-sitter-rust/")
	  (nix "https://github.com/nix-community/tree-sitter-nix"))))
#+end_src
** Languages
*** Clojure
**** clojure-mode
#+begin_src emacs-lisp :tangle yes
(use-package clojure-mode
  :custom (clojure-toplevel-inside-comment-form t))
#+end_src
**** cider
#+begin_src emacs-lisp :tangle yes
(use-package cider
  :ensure t)
#+end_src
*** Nix
**** nix-mode
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src
** LSP
*** eglot
#+begin_src emacs-lisp :tangle yes
(use-package eglot
  :ensure t
  :custom
  (eglot-events-buffer-size nil)
  (eglot-autoshutdown t)
  (eglot-extend-to-xref t)
  :config
  (add-hook 'clojure-mode-hook #'eglot-ensure))
#+end_src
* Org mode
My files:
- tasks.org
  something needs action
- notes.org
  something learned, maybe to be reviewed sometimes, maybe not categorized yet
- projects.org
  something continuous, maybe containing multiple subtasks
** Basic setup
*** org
#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure t
  :bind (("C-c l" . #'org-store-link)
	 ("C-c a" . #'org-agenda)
	 :map org-mode-map
	 ("C-c ," . org-insert-structure-template)
	 ("C-c C-," . org-insert-structure-template))
  :config
  (setq org-directory (expand-file-name "~/org"))
  (add-to-list 'safe-local-variable-values '(org-hide-leading-stars . t))
  (add-to-list 'safe-local-variable-values '(org-hide-macro-markers . t))

  ;; my files/folders
  (defvar my/org-tasks (concat org-directory "/tasks.org"))
  (defvar my/org-notes (concat org-directory "/notes.org"))
  (defvar my/org-projects (concat org-directory "/projects.org"))
  (defvar my/org-agenda-files `(,my/org-tasks
				,my/org-projects))

  ;; todo
  (setq org-todo-keywords '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCEL(c)")))
  
  ;; startup
  (setq org-startup-folded 'show3levels)
  (setq org-startup-truncated nil)

  ;; agenda
  (setq org-agenda-files my/org-agenda-files)
    
  ;; refile
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-targets `((my/org-tasks :level . 1)
			     (my/org-projects :level . 2)
			     (my/org-notes :level . 1)))
    
  ;; log
  (setq org-log-into-drawer t)
  (setq org-log-done 'time))
#+end_src
*** org-src
#+begin_src emacs-lisp :tangle yes
(use-package org-src
  :custom ((org-edit-src-content-indentation 0)
	   (org-src-window-setup 'current-window)
	   (org-src-fontify-natively nil)
	   (org-src-tab-acts-natively nil)))
#+end_src
*** org-capture
#+begin_src emacs-lisp :tangle yes
(use-package org-capture
  :bind ("C-c c" . #'org-capture)
  :config
  (setq org-capture-use-agenda-date t)
  (setq org-capture-bookmark nil)
  (setq org-capture-templates `(("t" "Task" entry (file my/org-tasks)
				 "* TODO %?\n %i")
				("n" "Note" entry (file my/org-notes)
				 "* %?\nEntered on %U\n %i"))))
#+end_src
*** org-popup-posframe
#+begin_src emacs-lisp :tangle no
;; (use-package org-popup-posframe
;;   :ensure t
;;   :after posframe
;;   :vc (:url "https://github.com/A7R7/org-popup-posframe.git" :rev :newest)
;;   :custom
;;   (org-popup-posframe-mode 1))
#+end_src
** Theme
*** org-superstar
#+begin_src emacs-lisp :tangle yes
(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-leading-bullet " "))
#+end_src
** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :ensure t
  :bind (("C-c n f" . #'org-roam-node-find)
	 ("C-c n i" . #'org-roam-node-insert)
	 ("C-c n t" . #'org-roam-buffer-toggle)
	 ("C-c n a" . #'org-roam-alias-add))
  :config
  (setq org-roam-directory (concat org-directory "/roam"))
  (org-roam-db-autosync-mode))
#+end_src
* Reading Documents
** Read ePub
#+begin_src emacs-lisp :tangle yes
(use-package nov
  ;; "Major mode for reading EPUBs in Emacs"
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)

;; (use-package nov-xwidget
;;   :demand t
;;   :after nov
;;   :vc ( :url https://github.com/chenyanming/nov-xwidget
;; 	:branch :"main")
;;   :hook (nov-mode . nov-xwidget-inject-all-files)
;;   :bind ( :map nov-mode-map
;; 	  ("o" . nov-widget-view)))
#+end_src
* Footer
** Enable magic file name again
#+begin_src emacs-lisp :tangle yes
(setq file-name-handler-alist my/saved-file-name-handler-alist)
#+end_src
